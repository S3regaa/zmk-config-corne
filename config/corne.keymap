/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            layers = <0 1 2>;
        };

        Left_Parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 3>;
            layers = <0>;
            timeout-ms = <50>;
        };

        Right_Parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            layers = <0>;
            timeout-ms = <50>;
        };

        Left_Bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 15>;
            timeout-ms = <50>;
            layers = <0>;
        };

        Right_Bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <19 20>;
            timeout-ms = <50>;
            layers = <0>;
        };

        Left_Brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 27>;
            timeout-ms = <50>;
            layers = <0>;
        };

        Right_Brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
            timeout-ms = <50>;
            layers = <0>;
        };

        game_loyer {
            bindings = <&mo 3>;
            key-positions = <24 35>;
        };

        default_layer {
            bindings = <&mo 0>;
            key-positions = <12 23>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <14 15 16 17 18 19 20 21>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q  &kp W  &kp E            &kp R         &kp T                &kp Y               &kp U           &kp I             &kp O    &kp P     &kp LEFT_BRACKET
&kp CAPSLOCK  &kp A  &kp S  &hrm LEFT_ALT D  &hrm LCTRL F  &hrm LEFT_SHIFT G    &hrm RIGHT_SHIFT H  &hrm RCTRL J    &hrm RIGHT_ALT K  &kp L    &kp SEMI  &kp SQT
&kp GRAVE     &kp Z  &kp X  &kp C            &kp V         &kp B                &kp N               &kp M           &kp COMMA         &kp DOT  &kp FSLH  &kp RIGHT_BRACKET
                            &kp ESCAPE       &lt 1 KP_DOT  &kp SPACE            &kp RET             &lt 2 KP_COMMA  &kp BACKSPACE
            >;
        };

        namber_loyer {
            bindings = <
&kp F1           &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                &kp F7               &kp F8  &kp F9   &kp F10  &kp F11  &kp F12
&kp PRINTSCREEN  &kp N1  &kp N2  &kp N3  &kp N4  &hrm N5 LEFT_SHIFT    &hrm N6 RIGHT_SHIFT  &kp N7  &kp N8   &kp N9   &kp N0   &trans
&trans           &trans  &trans  &trans  &trans  &kp MINUS             &kp EQUAL            &trans  &trans   &trans   &trans   &trans
                                 &trans  &trans  &kp SPACE             &kp ENTER            &trans  &kp DEL
            >;
        };

        sistem_loyer {
            bindings = <
&trans       &trans  &trans          &kp UP_ARROW    &trans           &trans    &kp K_MUTE        &kp C_VOLUME_UP    &kp C_VOLUME_DOWN  &trans       &bt BT_CLR  &trans
&trans       &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans    &kp K_PLAY_PAUSE  &kp K_SCROLL_UP    &kp C_PLAY         &kp C_PAUSE  &bt BT_PRV  &bt BT_NXT
&key_repeat  &trans  &trans          &trans          &trans           &trans    &kp K_STOP        &kp K_SCROLL_DOWN  &trans             &trans       &trans      &trans
                                     &trans          &trans           &trans    &trans            &trans             &trans
            >;
        };

        game_layer_without_hrm {
            bindings = <
&kp TAB       &kp Q  &kp W  &kp E       &kp R         &kp T        &kp Y    &kp U           &kp I          &kp O    &kp P     &kp LEFT_BRACKET
&kp CAPSLOCK  &kp A  &kp S  &kp D       &kp F         &kp G        &kp H    &kp J           &kp K          &kp L    &kp SEMI  &kp SQT
&kp GRAVE     &kp Z  &kp X  &kp C       &kp V         &kp B        &kp N    &kp M           &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_BRACKET
                            &kp ESCAPE  &lt 1 KP_DOT  &kp SPACE    &kp RET  &lt 2 KP_COMMA  &kp BACKSPACE
            >;
        };
    };
};
